%implements s43_b0_aimrq_0_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

emxArray_real_T_Model_6DOF_T *mp1;
emxArray_real_T_Model_6DOF_T *mp2;
emxArray_real_T_Model_6DOF_T *mp3;
emxArray_real_T_Model_6DOF_T *nA;
emxArray_real_T_Model_6DOF_T *r1;
emxArray_real_T_Model_6DOF_T *r2;
emxArray_real_T_Model_6DOF_T *r3;
real_T RMATD[9];
real_T RMATX[9];
real_T RMat[9];
real_T dM_tmp[9];
real_T MP1[3];
real_T MP2[3];
real_T RMATD_0[3];
real_T dM[3];
real_T dM_tmp_0[3];
real_T vert3[3];
real_T x_e_0[3];
real_T x_e_1[3];
real_T x_e_2[3];
real_T RMat_tmp;
real_T RMat_tmp_0;
real_T RMat_tmp_1;
real_T p1;
real_T p1_tmp;
real_T p2;
real_T p3;
real_T x_e;
real_T y_e;
real_T z_e;
int32_T d_i;
int32_T i;
%closefile localVarDecl
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,5,22,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,21,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,20,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,19,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,18,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,17,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,16,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,15,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,14,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,13,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,12,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,11,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,10,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,9,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,8,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,7,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,6,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,5,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,4,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,3,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,2,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,1,1)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

%if SLibCG_FcnCallArgAccessed(0,5,0,2)
%<SLibCG_AccessArg(0 ,5, 0)>
%endif

memcpy(&localB->vert1[0], &rtu_vert1[0], 600U * sizeof(real_T));
memcpy(&localB->vert2[0], &rtu_vert2[0], 600U * sizeof(real_T));
memcpy(&localB->vert3[0], &rtu_vert3[0], 600U * sizeof(real_T));
RMat_tmp = cos(rtu_Xearth[5]);
RMat_tmp_0 = sin(rtu_Xearth[3]);
RMat_tmp_1 = sin(rtu_Xearth[5]);
p1 = cos(rtu_Xearth[3]);
p2 = sin(rtu_Xearth[4]);
p3 = cos(rtu_Xearth[4]);
RMat[0] = p3 * RMat_tmp;
RMat[3] = RMat_tmp_0 * p2 * RMat_tmp + -p1 * RMat_tmp_1;
RMat[6] = p1 * p2 * RMat_tmp + RMat_tmp_0 * RMat_tmp_1;
RMat[1] = p3 * RMat_tmp_1;
RMat[4] = sin(rtu_Xearth[3]) * sin(rtu_Xearth[4]) * RMat_tmp_1 + p1 * RMat_tmp;
RMat[7] = cos(rtu_Xearth[3]) * sin(rtu_Xearth[4]) * RMat_tmp_1 + -RMat_tmp_0 * RMat_tmp;
RMat[2] = -p2;
RMat[5] = RMat_tmp_0 * p3;
RMat[8] = p1 * p3;
RMat_tmp = cos(rtu_EAX[2]);
RMat_tmp_0 = sin(rtu_EAX[0]);
RMat_tmp_1 = sin(rtu_EAX[2]);
p1 = cos(rtu_EAX[0]);
p2 = sin(rtu_EAX[1]);
p3 = cos(rtu_EAX[1]);
RMATX[0] = p3 * RMat_tmp;
RMATX[3] = RMat_tmp_0 * p2 * RMat_tmp + -p1 * RMat_tmp_1;
RMATX[6] = p1 * p2 * RMat_tmp + RMat_tmp_0 * RMat_tmp_1;
RMATX[1] = p3 * RMat_tmp_1;
RMATX[4] = sin(rtu_EAX[0]) * sin(rtu_EAX[1]) * RMat_tmp_1 + p1 * RMat_tmp;
RMATX[7] = cos(rtu_EAX[0]) * sin(rtu_EAX[1]) * RMat_tmp_1 + -RMat_tmp_0 * RMat_tmp;
RMATX[2] = -p2;
RMATX[5] = RMat_tmp_0 * p3;
RMATX[8] = p1 * p3;
RMat_tmp = sin(rtu_dX);
RMat_tmp_0 = cos(rtu_dX);
RMATD[0] = RMat_tmp_0;
RMATD[3] = 0.0 * RMat_tmp_0 + -RMat_tmp;
RMATD[6] = 0.0 * RMat_tmp + 0.0 * cos(rtu_dX);
RMATD[1] = RMat_tmp;
RMATD[4] = 0.0 * sin(rtu_dX) + RMat_tmp_0;
RMATD[7] = -0.0 * RMat_tmp_0 + 0.0 * sin(rtu_dX);
RMATD[2] = 0.0;
RMATD[5] = 0.0;
RMATD[8] = 1.0;
if ((int32_T)rtu_ntri - 1 >= 0) {
    %<(SLibCGCallSubFcn("Model_6DOF_inv", ["RMATX", "dM_tmp", "%<::tSimStruct>"], 0, 5, 0))>;
}
for (i = 0; i < (int32_T)rtu_ntri; i++) {
    RMat_tmp = (localB->vert1[i] - rtu_origin[0] * 70.2) + rtu_xcg[0];
    RMat_tmp_0 = (localB->vert1[i + 200] - rtu_origin[1] * 70.2) + rtu_xcg[1];
    RMat_tmp_1 = (localB->vert1[i + 400] - rtu_origin[2] * 70.2) + rtu_xcg[2];
    for (d_i = 0; d_i < 3; d_i++) {
        dM_tmp_0[d_i] = (dM_tmp[d_i + 3] * RMat_tmp_0 + dM_tmp[d_i] * RMat_tmp) + dM_tmp[d_i + 6] * RMat_tmp_1;
    }
    for (d_i = 0; d_i < 3; d_i++) {
        RMATD_0[d_i] = (RMATD[d_i + 3] * dM_tmp_0[1] + RMATD[d_i] * dM_tmp_0[0]) + RMATD[d_i + 6] * dM_tmp_0[2];
    }
    dM_tmp_0[0] = localB->vert2[i];
    dM_tmp_0[1] = localB->vert2[i + 200];
    dM_tmp_0[2] = localB->vert2[i + 400];
    for (d_i = 0; d_i < 3; d_i++) {
        MP1[d_i] = (dM_tmp_0[d_i] - rtu_origin[d_i] * 70.2) + rtu_xcg[d_i];
        dM[d_i] = (RMATX[d_i + 3] * RMATD_0[1] + RMATX[d_i] * RMATD_0[0]) + RMATX[d_i + 6] * RMATD_0[2];
    }
    for (d_i = 0; d_i < 3; d_i++) {
        dM_tmp_0[d_i] = (dM_tmp[d_i + 3] * MP1[1] + dM_tmp[d_i] * MP1[0]) + dM_tmp[d_i + 6] * MP1[2];
    }
    for (d_i = 0; d_i < 3; d_i++) {
        RMATD_0[d_i] = (RMATD[d_i + 3] * dM_tmp_0[1] + RMATD[d_i] * dM_tmp_0[0]) + RMATD[d_i + 6] * dM_tmp_0[2];
    }
    dM_tmp_0[0] = localB->vert3[i];
    dM_tmp_0[1] = localB->vert3[i + 200];
    dM_tmp_0[2] = localB->vert3[i + 400];
    for (d_i = 0; d_i < 3; d_i++) {
        vert3[d_i] = (dM_tmp_0[d_i] - rtu_origin[d_i] * 70.2) + rtu_xcg[d_i];
        MP1[d_i] = (RMATX[d_i + 3] * RMATD_0[1] + RMATX[d_i] * RMATD_0[0]) + RMATX[d_i + 6] * RMATD_0[2];
    }
    for (d_i = 0; d_i < 3; d_i++) {
        dM_tmp_0[d_i] = (dM_tmp[d_i + 3] * vert3[1] + dM_tmp[d_i] * vert3[0]) + dM_tmp[d_i + 6] * vert3[2];
    }
    for (d_i = 0; d_i < 3; d_i++) {
        RMATD_0[d_i] = (RMATD[d_i + 3] * dM_tmp_0[1] + RMATD[d_i] * dM_tmp_0[0]) + RMATD[d_i + 6] * dM_tmp_0[2];
    }
    for (d_i = 0; d_i < 3; d_i++) {
        int32_T vert1_tmp;
        vert1_tmp = 200 * d_i + i;
        localB->vert1[vert1_tmp] = (rtu_origin[d_i] * 70.2 + dM[d_i]) - rtu_xcg[d_i];
        localB->vert2[vert1_tmp] = (rtu_origin[d_i] * 70.2 + MP1[d_i]) - rtu_xcg[d_i];
        localB->vert3[vert1_tmp] = (((RMATX[d_i + 3] * RMATD_0[1] + RMATX[d_i] * RMATD_0[0]) + RMATX[d_i + 6] * RMATD_0[2]) + rtu_origin[d_i] * 70.2) - rtu_xcg[d_i];
    }
}
%<(SLibCGCallSubFcn("Model_6DOF_emxInit_real_T", ["&mp1", "2", "%<::tSimStruct>"], 0, 5, 9))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxInit_real_T", ["&mp2", "2", "%<::tSimStruct>"], 0, 5, 10))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxInit_real_T", ["&mp3", "2", "%<::tSimStruct>"], 0, 5, 11))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxInit_real_T", ["&nA", "2", "%<::tSimStruct>"], 0, 5, 12))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxInit_real_T", ["&r1", "2", "%<::tSimStruct>"], 0, 5, 13))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxInit_real_T", ["&r2", "2", "%<::tSimStruct>"], 0, 5, 14))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxInit_real_T", ["&r3", "2", "%<::tSimStruct>"], 0, 5, 15))>;
d_i = mp1->size[0] * mp1->size[1];
mp1->size[0] = (int32_T)rtu_ntri;
mp1->size[1] = 3;
%<(SLibCGCallSubFcn("Model__emxEnsureCapacity_real_T", ["mp1", "d_i", "%<::tSimStruct>"], 0, 5, 2))>;
d_i = mp2->size[0] * mp2->size[1];
mp2->size[0] = (int32_T)rtu_ntri;
mp2->size[1] = 3;
%<(SLibCGCallSubFcn("Model__emxEnsureCapacity_real_T", ["mp2", "d_i", "%<::tSimStruct>"], 0, 5, 3))>;
d_i = mp3->size[0] * mp3->size[1];
mp3->size[0] = (int32_T)rtu_ntri;
mp3->size[1] = 3;
%<(SLibCGCallSubFcn("Model__emxEnsureCapacity_real_T", ["mp3", "d_i", "%<::tSimStruct>"], 0, 5, 4))>;
d_i = nA->size[0] * nA->size[1];
nA->size[0] = (int32_T)rtu_ntri;
nA->size[1] = 3;
%<(SLibCGCallSubFcn("Model__emxEnsureCapacity_real_T", ["nA", "d_i", "%<::tSimStruct>"], 0, 5, 5))>;
d_i = r1->size[0] * r1->size[1];
r1->size[0] = (int32_T)rtu_ntri;
r1->size[1] = 3;
%<(SLibCGCallSubFcn("Model__emxEnsureCapacity_real_T", ["r1", "d_i", "%<::tSimStruct>"], 0, 5, 6))>;
d_i = r2->size[0] * r2->size[1];
r2->size[0] = (int32_T)rtu_ntri;
r2->size[1] = 3;
%<(SLibCGCallSubFcn("Model__emxEnsureCapacity_real_T", ["r2", "d_i", "%<::tSimStruct>"], 0, 5, 7))>;
d_i = r3->size[0] * r3->size[1];
r3->size[0] = (int32_T)rtu_ntri;
r3->size[1] = 3;
%<(SLibCGCallSubFcn("Model__emxEnsureCapacity_real_T", ["r3", "d_i", "%<::tSimStruct>"], 0, 5, 8))>;
for (i = 0; i < (int32_T)rtu_ntri; i++) {
    dM[0] = localB->vert2[i] - localB->vert1[i];
    RMat_tmp = localB->vert1[i + 200];
    RMat_tmp_0 = localB->vert2[i + 200];
    dM[1] = RMat_tmp_0 - RMat_tmp;
    RMat_tmp_1 = localB->vert1[i + 400];
    x_e = localB->vert2[i + 400];
    dM[2] = x_e - RMat_tmp_1;
    MP1[0] = localB->vert3[i] - localB->vert1[i];
    y_e = localB->vert3[i + 200];
    MP1[1] = y_e - RMat_tmp;
    z_e = localB->vert3[i + 400];
    MP1[2] = z_e - RMat_tmp_1;
    p1 = dM[1] * MP1[2] - MP1[1] * dM[2];
    MP2[0] = p1;
    p2 = MP1[0] * dM[2] - dM[0] * MP1[2];
    MP2[1] = p2;
    p3 = dM[0] * MP1[1] - MP1[0] * dM[1];
    MP2[2] = p3;
    p1_tmp = %<(SLibCGCallSubFcn("Model_6DOF_norm", ["MP2", "%<::tSimStruct>"], 0, 5, 1))>;
    nA->data[i] = p1 / p1_tmp * rtu_dA[i];
    r1->data[i] = (localB->vert1[i] + localB->vert2[i]) * 0.5;
    r2->data[i] = (localB->vert1[i] + localB->vert3[i]) * 0.5;
    r3->data[i] = (localB->vert2[i] + localB->vert3[i]) * 0.5;
    nA->data[i + nA->size[0]] = p2 / p1_tmp * rtu_dA[i];
    r1->data[i + r1->size[0]] = (RMat_tmp + RMat_tmp_0) * 0.5;
    r2->data[i + r2->size[0]] = (RMat_tmp + y_e) * 0.5;
    r3->data[i + r3->size[0]] = (RMat_tmp_0 + y_e) * 0.5;
    nA->data[i + (nA->size[0] << 1)] = p3 / p1_tmp * rtu_dA[i];
    r1->data[i + (r1->size[0] << 1)] = (RMat_tmp_1 + x_e) * 0.5;
    r2->data[i + (r2->size[0] << 1)] = (RMat_tmp_1 + z_e) * 0.5;
    r3->data[i + (r3->size[0] << 1)] = (x_e + z_e) * 0.5;
}
if ((int32_T)rtu_ntri - 1 >= 0) {
    x_e_0[0] = rtu_Xearth[0];
    x_e_0[1] = rtu_Xearth[1];
    x_e_0[2] = rtu_Xearth[2];
    x_e_1[0] = rtu_Xearth[0];
    x_e_1[1] = rtu_Xearth[1];
    x_e_1[2] = rtu_Xearth[2];
    x_e_2[0] = rtu_Xearth[0];
    x_e_2[1] = rtu_Xearth[1];
    x_e_2[2] = rtu_Xearth[2];
}
for (i = 0; i < (int32_T)rtu_ntri; i++) {
    real_T r3_idx_2;
    RMat_tmp_1 = r1->data[i];
    x_e = r1->data[i + r1->size[0]];
    y_e = r1->data[(r1->size[0] << 1) + i];
    z_e = r2->data[i];
    p1 = r2->data[i + r2->size[0]];
    p2 = r2->data[(r2->size[0] << 1) + i];
    p3 = r3->data[i];
    p1_tmp = r3->data[i + r3->size[0]];
    r3_idx_2 = r3->data[(r3->size[0] << 1) + i];
    for (d_i = 0; d_i < 3; d_i++) {
        RMat_tmp = RMat[d_i + 3];
        RMat_tmp_0 = RMat[d_i + 6];
        mp1->data[i + mp1->size[0] * d_i] = ((RMat_tmp * x_e + RMat[d_i] * RMat_tmp_1) + RMat_tmp_0 * y_e) + x_e_0[d_i];
        mp2->data[i + mp2->size[0] * d_i] = ((RMat_tmp * p1 + RMat[d_i] * z_e) + RMat_tmp_0 * p2) + x_e_1[d_i];
        mp3->data[i + mp3->size[0] * d_i] = ((RMat_tmp * p1_tmp + RMat[d_i] * p3) + RMat_tmp_0 * r3_idx_2) + x_e_2[d_i];
    }
}
x_e = 0.0;
y_e = 0.0;
z_e = 0.0;
RMat_tmp = 0.0;
RMat_tmp_0 = 0.0;
RMat_tmp_1 = 0.0;
for (d_i = 0; d_i < (int32_T)rtu_ntri; d_i++) {
    p3 = rtu_w_wave * rtu_time;
    p1_tmp = -rtu_rho * rtu_g;
    p1 = (mp1->data[(mp1->size[0] << 1) + d_i] - exp(mp1->data[(mp1->size[0] << 1) + d_i] * rtu_k_wave) * rtu_A_wave * sin(rtu_k_wave * mp1->data[d_i] - p3)) * p1_tmp;
    p2 = (mp2->data[(mp2->size[0] << 1) + d_i] - exp(mp2->data[(mp2->size[0] << 1) + d_i] * rtu_k_wave) * rtu_A_wave * sin(rtu_k_wave * mp2->data[d_i] - p3)) * p1_tmp;
    p3 = (mp3->data[(mp3->size[0] << 1) + d_i] - exp(mp3->data[(mp3->size[0] << 1) + d_i] * rtu_k_wave) * rtu_A_wave * sin(rtu_k_wave * mp3->data[d_i] - p3)) * p1_tmp;
    MP1[0] = (-p1 * r1->data[d_i] - p2 * r2->data[d_i]) - p3 * r3->data[d_i];
    MP1[1] = (r1->data[d_i + r1->size[0]] * -p1 - r2->data[d_i + r2->size[0]] * p2) - r3->data[d_i + r3->size[0]] * p3;
    MP1[2] = ((r1->data[(r1->size[0] << 1) + d_i] - rtu_Zb) * -p1 - (r2->data[(r2->size[0] << 1) + d_i] - rtu_Zb) * p2) - (r3->data[(r3->size[0] << 1) + d_i] - rtu_Zb) * p3;
    MP2[0] = nA->data[d_i];
    MP2[1] = nA->data[d_i + nA->size[0]];
    MP2[2] = nA->data[(nA->size[0] << 1) + d_i];
    p1 = (p1 + p2) + p3;
    x_e += p1 * -nA->data[d_i] / 3.0;
    y_e += -nA->data[d_i + nA->size[0]] * p1 / 3.0;
    z_e += -nA->data[(nA->size[0] << 1) + d_i] * p1 / 3.0;
    RMat_tmp += (MP1[1] * MP2[2] - MP2[1] * MP1[2]) / 3.0;
    RMat_tmp_0 += (MP2[0] * MP1[2] - MP1[0] * MP2[2]) / 3.0;
    RMat_tmp_1 += (MP1[0] * MP2[1] - MP2[0] * MP1[1]) / 3.0;
}
%<(SLibCGCallSubFcn("Model_6DOF_emxFree_real_T", ["&r3", "%<::tSimStruct>"], 0, 5, 22))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxFree_real_T", ["&r2", "%<::tSimStruct>"], 0, 5, 21))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxFree_real_T", ["&r1", "%<::tSimStruct>"], 0, 5, 20))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxFree_real_T", ["&nA", "%<::tSimStruct>"], 0, 5, 19))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxFree_real_T", ["&mp3", "%<::tSimStruct>"], 0, 5, 18))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxFree_real_T", ["&mp2", "%<::tSimStruct>"], 0, 5, 17))>;
%<(SLibCGCallSubFcn("Model_6DOF_emxFree_real_T", ["&mp1", "%<::tSimStruct>"], 0, 5, 16))>;
localB->Fx_total = x_e;
localB->Fy_total = y_e;
localB->Fz_total = z_e;
localB->Mx_total = RMat_tmp;
localB->My_total = RMat_tmp_0;
localB->Mz_total = RMat_tmp_1;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 5, 0)>
%endif
%if SLibCG_ArgAccessed(0, 5, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 5, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_6DOF_MATLABFunction4(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 5, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_6DOF_MATLABFunction4", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>real_T rtu_time\
%assign comma = ", "
%<comma>const real_T rtu_Xearth[6]\
%assign comma = ", "
%<comma>const real_T rtu_vert1[600]\
%assign comma = ", "
%<comma>const real_T rtu_vert2[600]\
%assign comma = ", "
%<comma>const real_T rtu_vert3[600]\
%assign comma = ", "
%<comma>const real_T rtu_dA[200]\
%assign comma = ", "
%<comma>real_T rtu_ntri\
%assign comma = ", "
%<comma>real_T rtu_A_wave\
%assign comma = ", "
%<comma>real_T rtu_k_wave\
%assign comma = ", "
%<comma>real_T rtu_w_wave\
%assign comma = ", "
%<comma>real_T rtu_rho\
%assign comma = ", "
%<comma>real_T rtu_g\
%assign comma = ", "
%<comma>real_T rtu_Zb\
%assign comma = ", "
%<comma>const real_T rtu_EAX[3]\
%assign comma = ", "
%<comma>real_T rtu_dX\
%assign comma = ", "
%<comma>const real_T rtu_origin[3]\
%assign comma = ", "
%<comma>const real_T rtu_xcg[3]\
%assign comma = ", "
%<comma>B_MATLABFunction4_Model_6DOF_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 5, fcnProtoType)>
%endfunction
